kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
    name: px-repl3-sc
provisioner: kubernetes.io/portworx-volume
parameters:
   repl: "3"
   io_profile: "db"
   priority_io: "high"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
   name: px-redis-data
   labels:
     appname: redisapp
spec:
   storageClassName: px-repl3-sc
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
   name: px-redis-conf
   labels:
     appname: redisapp
spec:
   storageClassName: px-repl3-sc
   accessModes:
     - ReadWriteOnce
   resources:
     requests:
       storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "redis"
  labels:
     appname: redisapp
     name: redis
     component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis
      component: redis
      app: redis
  template:
    metadata:
      labels:
        name: redis
        component: redis
        app: redis
    spec:
      containers:
        - name: redis
          image: "redis:5-alpine"
          command:
            - "redis-server"
          args:
            - "--protected-mode"
            - "no"
            - "--appendonly"
            - "yes"
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
          ports:
            - name: redis
              containerPort: 6379
              protocol: "TCP"
            - name: cluster
              containerPort: 16379
              protocol: "TCP"
          volumeMounts:
            - name: "redis-conf"
              mountPath: "/etc/redis"
            - name: "redis-data"
              mountPath: "/data"
      volumes:
        - name: "redis-data"
          persistentVolumeClaim:
             claimName: px-redis-data
        - name: "redis-conf"
          persistentVolumeClaim:
             claimName: px-redis-conf
---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    appname: redisapp
    name: redis-svc
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    name: redis
    component: redis
    app: redis
---
# fake redis-slave service for reads
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  labels:
    appname: redisapp
    name: redis-svc
    role: master
    tier: backend
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    name: redis
    component: redis
    app: redis
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: frontend
  labels:
    appname: redisapp
    app: guestbook
spec:
  selector:
    matchLabels:
      app: guestbook
      tier: frontend
  replicas: 2
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # Using `GET_HOSTS_FROM=dns` requires your cluster to
          # provide a dns service. As of Kubernetes 1.3, DNS is a built-in
          # service launched automatically. However, if the cluster you are using
          # does not have a built-in DNS service, you can instead
          # access an environment variable to find the master
          # service's host. To do so, comment out the 'value: dns' line above, and
          # uncomment the line below:
          # value: env
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontend
    appname: redisapp
spec:
  type: NodePort 
  ports:
  - port: 80
  selector:
    app: guestbook
    tier: frontend
